import org.junit.Before;
import org.junit.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;
import static org.junit.Assert.*;

public class ContactDetailServiceImplTest {

    @InjectMocks
    private ContactDetailServiceImpl service;

    @Mock
    private UserDetailServiceImpl userDetailServiceImpl;

    @Mock
    private ContactsWebApi contactsWebApi;

    @Mock
    private IdentityApi identityApi;

    @Mock
    private ContactsApi contactsApi;

    @Mock
    private ReferralApi referralApi;

    @Mock
    private FormsApi formsApi;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
        service = new ContactDetailServiceImpl();
    }

    @Test
    public void testCreateContact_Success() throws Exception {
        // Arrange
        Long userId = 1L;
        Long idStage = 1L;
        ContactRequestObject request = new ContactRequestObject(); // Populate request object as needed
        ContactResponseObject expectedResponse = new ContactResponseObject();
        expectedResponse.setSuccess(true);

        when(userDetailServiceImpl.getUser(any(String.class))).thenReturn(userId);
        when(service.isValidStage(idStage)).thenReturn(true);
        when(service.hasStageAccess(userId, idStage)).thenReturn(true);
        // Mock further interactions as necessary to simulate successful contact creation

        // Act
        ContactResponseObject actualResponse = service.createContact(request, "validUser");

        // Assert
        assertTrue(actualResponse.isSuccess());
    }

    @Test(expected = ResourceNotFoundException.class)
    public void testCreateContact_InvalidStage() {
        // Arrange
        Long userId = 1L;
        Long invalidStageId = 999L;
        ContactRequestObject request = new ContactRequestObject();

        when(userDetailServiceImpl.getUser(any(String.class))).thenReturn(userId);
        when(service.isValidStage(invalidStageId)).thenReturn(false);

        // Act
        service.createContact(request, "validUser");
    }

    @Test(expected = ForbiddenException.class)
    public void testCreateContact_AccessDenied() {
        // Arrange
        Long userId = 1L;
        Long idStage = 1L;
        ContactRequestObject request = new ContactRequestObject();

        when(userDetailServiceImpl.getUser(any(String.class))).thenReturn(userId);
        when(service.isValidStage(idStage)).thenReturn(true);
        when(service.hasStageAccess(userId, idStage)).thenReturn(false);

        // Act
        service.createContact(request, "validUser");
    }

    @Test(expected = HttpClientErrorException.class)
    public void testCreateContact_ExternalServiceError() {
        // Arrange
        Long userId = 1L;
        Long idStage = 1L;
        ContactRequestObject request = new ContactRequestObject();

        when(userDetailServiceImpl.getUser(any(String.class))).thenReturn(userId);
        when(service.isValidStage(idStage)).thenReturn(true);
        when(service.hasStageAccess(userId, idStage)).thenReturn(true);
        when(contactsWebApi.saveContactDetailFromApiUsingPOST(any(), any(), any()))
                .thenThrow(new HttpClientErrorException(HttpStatus.BAD_REQUEST));

        // Act
        service.createContact(request, "validUser");
    }
}
